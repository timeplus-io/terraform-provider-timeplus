// SPDX-License-Identifier: MPL-2.0

package provider

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/timeplus-io/terraform-provider-timeplus/internal/timeplus"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &sinkDataSource{}

func NewSinkDataSource() datasource.DataSource {
	return &sinkDataSource{}
}

// sinkDataSource defines the data source implementation.
type sinkDataSource struct {
	client *timeplus.Client
}

// sinkDataSourceModel describes the data source data model.
type sinkDataSourceModel sinkResourceModel

func (d *sinkDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_sink"
}

func (d *sinkDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "Timeplus sinks run queries in background and send query results to the target system continuously.",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				MarkdownDescription: "The sink immutable ID, generated by Timeplus",
				Required:            true,
			},
			"name": schema.StringAttribute{
				MarkdownDescription: "The human-friendly name for the sink",
				Computed:            true,
			},
			"description": schema.StringAttribute{
				MarkdownDescription: "A detailed text describes the sink",
				Computed:            true,
			},
			"query": schema.StringAttribute{
				MarkdownDescription: "The query the sink uses to generate data",
				Computed:            true,
			},
			"type": schema.StringAttribute{
				MarkdownDescription: "The type of the sink, refer to the Timeplus document for supported sink types",
				Computed:            true,
			},
			// since Terraform does not have built-in support for map[string]any with the framework library, we use JSON as a simple solution
			"properties": schema.StringAttribute{
				MarkdownDescription: "A JSON object defines the configurations for the specific sink type. The properites could contain sensitive information like password, secret, etc.",
				Sensitive:           true,
				Computed:            true,
			},
		},
	}
}

func (d *sinkDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*timeplus.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *timeplus.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.client = client
}

func (d *sinkDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *sinkDataSourceModel

	// Read Terraform prior state data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	s, err := d.client.GetSink(data.ID.ValueString())
	if err != nil {
		resp.Diagnostics.AddError(
			"Error Reading Sink",
			fmt.Sprintf("Unable to read sink %q, got error: %s",
				data.Name.ValueString(), err))
		return
	}

	// required fields
	data.Name = types.StringValue(s.Name)
	data.Description = types.StringValue(s.Description)
	data.Query = types.StringValue(s.SQL)
	data.Type = types.StringValue(s.Type)

	propsBytes, err := json.Marshal(s.Properties)
	if err != nil {
		resp.Diagnostics.AddError("Bad Sink Properties", fmt.Sprintf("Unable to encode sink properties into JSON, got error: %s", err))
		return
	}
	data.Properties = types.StringValue(string(propsBytes))

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
